import addContext from "mochawesome/addContext";
import chai from "chai";

import * as mediaHelper from "./media-helper.js";

const assert = chai.assert;

/**
 * Asserts that expected text is contained within or equal to text generated by application under test (AUT) and pass or fail test
 * Takes screenshot and saves to file if test fails
 *
 * @param {string} actualMessage - Actual message generated by the AUT
 * @param {string} expectedMessage - Expected message that AUT should generate
 * @param {string} displayMessage - Message to include in test report explaining issue
 * @param {webdriver} driver - Browser context in which to take screenshot
 * @param {MochaTestcase} testCase - Mocha test case in which to get title
 */
export async function assertInclude(actualMessage, expectedMessage, displayMessage, driver, testCase) {
	//let screenshot, imagePath;

	await assert.include(actualMessage, expectedMessage, displayMessage);

	/*if( actualMessage === expectedMessage ) {
		  await assert.include( actualMessage, expectedMessage, displayMessage );
	  } else {
		  screenshot = await mediaHelper.takeScreenshot( driver );
		  imagePath = await mediaHelper.saveImageToFile( 'screenshots', screenshot, testCase.test.title );
		  await addContext( testCase, imagePath );
		  await assert.include( actualMessage, expectedMessage, displayMessage );
	  }*/
}

/**
 * Asserts that expected text is strictly equal (===) to text generated by application under test (AUT) and pass or fail test
 * Takes screenshot and saves to file if test fails
 *
 * @param {string} actualMessage - Actual message generated by the AUT
 * @param {string} expectedMessage - Expected message that AUT should generate
 * @param {string} displayMessage - Message to include in test report explaining issue
 * @param {webdriver} driver - Browser context in which to take screenshot
 * @param {MochaTestcase} testCase - Mocha test case in which to get title
 */
export async function assertStrictEqual(actualMessage, expectedMessage, displayMessage, driver, testCase) {
	//let screenshot, imagePath;

	await assert.strictEqual(actualMessage, expectedMessage, displayMessage);

	/*if( actualMessage === expectedMessage ) {
		  await assert.strictEqual( actualMessage, expectedMessage, displayMessage );
	  } else {
		  screenshot = await mediaHelper.takeScreenshot( driver );
		  imagePath = await mediaHelper.saveImageToFile( 'screenshots', screenshot, testCase.test.title );
		  await addContext( testCase, imagePath );
		  await assert.strictEqual( actualMessage, expectedMessage, displayMessage );
	  }*/
}

/**
 * Asserts that expected text is not strictly equal (!==) to text generated by application under test (AUT) and pass or fail test
 * Takes screenshot and saves to file if test fails
 *
 * @param {string} actualMessage - Actual message generated by the AUT
 * @param {string} expectedMessage - Expected message that AUT should generate
 * @param {string} displayMessage - Message to include in test report explaining issue
 * @param {webdriver} driver - Browser context in which to take screenshot
 * @param {MochaTestcase} testCase - Mocha test case in which to get title
 */
export async function assertNotStrictEqual(actualMessage, expectedMessage, displayMessage, driver, testCase) {
	//let screenshot, imagePath;

	await assert.notStrictEqual(actualMessage, expectedMessage, displayMessage);

	/*if( actualMessage !== expectedMessage ) {
		  await assert.notStrictEqual( actualMessage, expectedMessage, displayMessage );
	  } else {
		  screenshot = await mediaHelper.takeScreenshot( driver );
		  imagePath = await mediaHelper.saveImageToFile( 'screenshots', screenshot, testCase.test.title );
		  await addContext( testCase, imagePath );
		  await assert.notStrictEqual( actualMessage, expectedMessage, displayMessage );
	  }*/
}